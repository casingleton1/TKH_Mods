Christopher Singleton - Vestibule - Module 6

Explain in your own words what Bash is: (300 Words)

BASH is actually an acronym for ÒBourne-Again ShellÓ which means it is another iteration of the Bourne shell released in the 1980s. The name is a pun on Stephen Bourne who was the author of the ancestor Unix shell ÔshÕ.  A shell is interpreter or software interface that allows users to interact with a computer terminal via the command line. It is called this, because it operates around the kernel and acts as a ÒshellÓ for manipulation.  Other examples include MS-DOS, ÔkshÕ, and ÔcshÕ. Bash is compatible with ÔshÕ yet also makes use of features within the aforementioned Korn and C shells. Deciding what shell a user wants to use depends on many factors. Each one has its own rules and levels of manipulation. Meaning, some languages are easier to learn for general users vs more experienced programmers. Bash is ÔshÕ compatible and reads commands directly from the standard input. Therefore, it does not require any additional programs to be installed. It is set as the default shell on MacOS and Linux systems because of its fast capabilities. However, it is simple to change shells at any time if one wants to use a different interpreter via a download or running a command. Part of BashÕs appeal to user is its ability to be scripted. Meaning, one can manually run commands or write a script in a plain-text file to have his computer execute multiple commands. This is due to it allowing the execution of synchronous GNU commands and asynchronous GNU commands. Other advantages of Bash are the use of brackets in sample mode, the simplicity of a less verbose syntax compared to other shells, and the open-source nature of the free software; the latter has allowed it to be versatile, highly compatible, portable and a standard in the tech industry. 

Explain: What is the terminal? (200 Words)

Terminal or a terminal window is an interface that allows users to send direct instructions or inputs to the computer via the command line. We still use them. Because due to many different operating systems existing, the command line is still the most universal way to run programs/commands. While GUIs (graphical user interfaces) visibly display information and interactions a user can have with a computer, graphical desktop environments/applications vary and show limited possible actions; so, getting the same output from each would call for different instructions to be sent. While using the terminal command line interface is succinct and standardized (for the most part). There are two types of terminals. For Mac computers, Linux based machines and some new computers running the most updated Windows software, the ÔBashÕ terminal is utilized (POSIX). For the strictly Windows computers and older versions, the application PowerShell is utilized which works with CMD (command) prompts. Both terminal types are able to run Unix bash commands (Unix being a portable, multi-user operating system. Not to be confused with Linux which is an open-source operating system.) Regardless of the type or versions, the command line within a terminal will be able to fully communicate with whatever programs are running inside it.


Explain in your own words: What are Bash Commands? ( 250 Words )

A command is simply any directive we type into the command line. Each shell has its own set of built-in commands for functionality within an operating system. For instance, commands such as Òcd", ÒbreakÓ, ÒcontinueÓ must be implemented within the shell as they manipulate the shell and not outlying utilities. Bash is no different. Commands are specific and few are universally useful (such as the aforementioned ÔcdÕ or change directory command). A bash command is the smallest single unit of code that can be input and run by a user. Built in commands will not show up if seared as they are not in the usual executable path. For instance, typing Òcd DesktopÓ after the Ô$Õ tells your computer to switch to the desktop folder/directory. And typing Òcd .Ó takes you back to the local home directory. Another short code is ÔpwdÕ which stands for Òprint working directoryÓ; this tells the terminal to return a listing of the current location the shell commands are looking at (i.e., the folder the user is running commands within). Besides built-in commands, bash can also interpret multiple other option command such as: -c (commands ran from a string), -i (interactive shell), -l (make bash act as if it is the login shell), -r (restrictive shell operation). Common multi-character commands are as follows: --debugger (turns on extended debugging mode), --help (displays a usage message on standard output text), --version (displays the version information for the iteration of bash being used in standard output.)

Explain: Why is the terminal essential? (250 Words)

Though terminal is set to open its window ready for Bash command inputs, the setting can be changed or a user can simply direct terminal to operate in another shell. These shells include but are not limited to Bash (Bourne Again Shell), csh (C shell), zsh (Z shell), ksh (Korn shell), and tcsh (TENEX C shell). This gives a user a variety of ways to communicate with the computer. As previously mentioned, graphical user interfaces of computers donÕt support every action user can take on his computer. Also, if somehow a GUI does happen to have high capabilities, the design my limit the accessibility to the user rendering the interface inefficient. Efficiency is important when programming. Though the terminal is not utilized directly to program software, it supplements the process by easing file and folder creation, text editing, file compilation, running programs, using version control and much more. Specifically, using the command line gives a complete record of every action taken. Therefore, if ever something is done incorrectly, the user can visually tell where the mistake was made and find a way to fix it. Knowing how to write commands on the command line gives one full access to everything a computer can do. For a penetration tester, this very important. If someone is knowledgeable of how to completely control a computer and gains remote access, the computer and the userÕs information is vulnerable. Hacking and being able to expose the vulnerabilities within a device/network allows for the information to be used to then better protect the computer and its information.


Explain Bash piping: (250 Words)

As mentioned before, Bash allows for manual entry of singular commands but it also allows users to streamline their commands via the use of scripting. Another method to aid users in commanding bash efficiently, is that of the pipeline (the utilization of pipelines being referred to as ÒpipingÓ). A pipeline is where one or multiple commands are placed in a sequence. Each command is separated by the Ô|Õ character (vertical bar). This signifies that the output of one command should be sent into the next command. Sequence of command is very important when piping. The syntax for a pipeline is as follows: [time [-p]] [ ! ] command [ | command2 É ] or simply: $ command1 | command2. When a filter command is in the Ôcommand2Õ position of the pipeline, it will take the input of the first command and transform it in whatever way dictated by the user. For instance, if there is a list containing multiple peopleÕs favorite it candies, and the pipeline is written like this: $cat candies.txt | sort | uniq, this will be a multi-step sort. The first command will find categories of candy (snickers, twix, sour patch); those results will be sent down the pipeline to the next command, which will sort those in alphabetical order; then those results will be sent to the next command (uniq), where only the first/unique mention of a candy will be listed (omitting multiple entries). This pipeline has 3 commands. However, it can be written in a 2-command form, by adding a restriction to that second command; this is done instead of creating a new command.



